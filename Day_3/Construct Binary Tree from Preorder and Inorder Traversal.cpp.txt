/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int index=0;
    TreeNode* solve(vector<int>& preorder, vector<int>& inorder,int st,int ed){
        if(st>ed){
            return nullptr;
        }
        if(st==ed || index==preorder.size()-1){
            TreeNode* curr=new TreeNode(preorder[index++]);
            return curr;
        }
        TreeNode* temp=new TreeNode(preorder[index++]);
        int id=0;
        for(int i=st;i<=ed;i++){
            if(temp->val==inorder[i]){
                id=i;
                break;
            }
        }
        temp->left=solve(preorder,inorder,st,id-1);
        temp->right=solve(preorder,inorder,id+1,ed);
        return temp;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n=preorder.size();
        return solve(preorder,inorder,0,n-1);
    }
};