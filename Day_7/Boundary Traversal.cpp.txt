#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool isLeaf(TreeNode<int>* root){
    if(root->left==NULL && root->right==NULL){
        return true;
    }
    return false;
}

void addleft(TreeNode<int>* root,vector<int> &res){
    TreeNode<int> *curr=root->left;
    while(curr){
        if(!isLeaf(curr)){
            res.push_back(curr->data);
        }
        if(curr->left){
            curr=curr->left;
        }
        else{
            curr=curr->right;
        }
    }
}

void addright(TreeNode<int>* root,vector<int> &res){
    TreeNode<int> *curr=root->right;
    vector<int> temp;
    while(curr){
        if(!isLeaf(curr)){
            temp.push_back(curr->data);
        }
        if(curr->right){
            curr=curr->right;
        }
        else{
            curr=curr->left;
        }
    }
    for(int i=temp.size()-1;i>=0;i--){
        res.push_back(temp[i]);
    }
}

void addleaf(TreeNode<int>* root,vector<int> &res){
    if(isLeaf(root)){
        res.push_back(root->data);
        return;
    }
    if(root->left){
        addleaf(root->left,res);
    }
    if(root->right){
        addleaf(root->right,res);
    }
}

vector<int> traverseBoundary(TreeNode<int>* root){
    vector<int> ans;
    if(root==NULL){
        return ans;
    }
    if(!isLeaf(root)){
        ans.push_back(root->data);
    }
    addleft(root,ans);
    addleaf(root,ans);
    addright(root,ans);
    return ans;
}