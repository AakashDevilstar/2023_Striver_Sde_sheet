//Method-1

#include<bits/stdc++.h>
void solve(int i,vector<int>&arr,int n,int sm,int target,set<vector<int>>&ans,vector<int> &curr){
	if(i==n){
		if(sm==target){
		 ans.insert(curr);
	    }
		return;
	}
	if(sm==target){
		ans.insert(curr);
		return;
	}
	if(sm>target){
		return;
	}
	solve(i+1,arr,n,sm,target,ans,curr);
	curr.push_back(arr[i]);
	solve(i+1,arr,n,sm+arr[i],target,ans,curr);
	curr.pop_back();
}

vector<vector<int>> combinationSum2(vector<int> &arr, int n, int target){
	sort(arr.begin(),arr.end());
	set<vector<int>> ans;
	vector<int> curr;
	vector<vector<int>> ans1;
	solve(0,arr,n,0,target,ans,curr);
	for(auto it: ans){
		ans1.push_back(it);
	}
	return ans1;
}

//Method-2

#include<bits/stdc++.h>
void solve(int i,vector<int>&arr,int n,int target,vector<vector<int>>&ans,vector<int> &curr){
	if(target==0){
		ans.push_back(curr);
		return;
	}
	if(i==n || target<0){
		return;
	}
	for(int j=i;j<n;j++){
		if(j>i && arr[j]==arr[j-1]){
			continue;
		}
		curr.push_back(arr[j]);
		solve(j+1,arr,n,target-arr[j],ans,curr);
		curr.pop_back();
	}

}

vector<vector<int>> combinationSum2(vector<int> &arr, int n, int target){
	sort(arr.begin(),arr.end());
	vector<vector<int>> ans;
	vector<int> curr;
	solve(0,arr,n,target,ans,curr);
	return ans;
}